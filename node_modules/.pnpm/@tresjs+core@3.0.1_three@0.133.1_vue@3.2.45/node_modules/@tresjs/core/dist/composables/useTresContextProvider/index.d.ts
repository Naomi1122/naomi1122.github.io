import { Camera, EventDispatcher, Raycaster, Scene, WebGLRenderer } from 'three';
import { UseRendererOptions } from '../useRenderer';
import type { ComputedRef, DeepReadonly, MaybeRef, MaybeRefOrGetter, Ref, ShallowRef } from 'vue';
export type TresContext = {
    scene: ShallowRef<Scene>;
    camera: ComputedRef<Camera | undefined>;
    cameras: DeepReadonly<Ref<Camera[]>>;
    renderer: ShallowRef<WebGLRenderer>;
    raycaster: ShallowRef<Raycaster>;
    controls: Ref<(EventDispatcher & {
        enabled: boolean;
    }) | null>;
    extend: (objects: any) => void;
    addCamera: (camera: Camera) => void;
    removeCamera: (camera: Camera) => void;
    setCameraActive: (cameraOrUuid: Camera | string) => void;
    sizes: {
        height: Ref<number>;
        width: Ref<number>;
        aspectRatio: ComputedRef<number>;
    };
};
export declare function useTresContextProvider({ scene, canvas, windowSize, disableRender, rendererOptions }: {
    scene: Scene;
    canvas: MaybeRef<HTMLCanvasElement>;
    windowSize: MaybeRefOrGetter<boolean>;
    disableRender: MaybeRefOrGetter<boolean>;
    rendererOptions: UseRendererOptions;
}): TresContext;
export declare function useTresContext(): TresContext;
export declare const useTres: typeof useTresContext;
