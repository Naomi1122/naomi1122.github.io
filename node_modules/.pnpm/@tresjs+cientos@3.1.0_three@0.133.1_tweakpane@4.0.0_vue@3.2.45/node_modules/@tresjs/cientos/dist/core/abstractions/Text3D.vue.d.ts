export type Glyph = {
    _cachedOutline: string[];
    ha: number;
    o: string;
};
export type FontData = {
    boundingBox: {
        yMax: number;
        yMin: number;
    };
    familyName: string;
    glyphs: {
        [k: string]: Glyph;
    };
    resolution: number;
    underlineThickness: number;
};
export interface Text3DProps {
    /**
     *
     *  The JSON font to use for the text.
     *  Text3D requires fonts in JSON format generated through [typeface.json](http://gero3.github.io/facetype.js)
     *
     * @type {(FontData | string)}
     * @memberof Text3DProps
     * @see https://threejs.org/docs/index.html?q=TEXT#examples/en/geometries/TextGeometry
     */
    font: FontData | string;
    /**
     * The text to display.
     *
     * @type {string}
     * @memberof Text3DProps
     */
    text?: string;
    /**
     * The size of the text.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.5
     */
    size?: number;
    /**
     * The height of the text.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.2
     */
    height?: number;
    /**
     * The curve segments of the text.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 5
     */
    curveSegments?: number;
    /**
     * Turn on bevel
     *
     * @type {boolean}
     * @memberof Text3DProps
     * @default true
     */
    bevelEnabled?: boolean;
    /**
     * How deep into text bevel goes.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.05
     */
    bevelThickness?: number;
    /**
     * How far from text outline is bevel.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.02
     */
    bevelSize?: number;
    /**
     * How far from text outline is bevel.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0
     */
    bevelOffset?: number;
    /**
     * How many bevel segments.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 4
     */
    bevelSegments?: number;
    /**
     * Whether to center the text.
     *
     * @type {boolean}
     * @memberof Text3DProps
     * @default false
     */
    center?: boolean;
    /**
     * Whether to update the text.
     *
     * @type {boolean}
     * @memberof Text3DProps
     * @default false
     */
    needUpdates?: boolean;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    height: {
        type: import("vue").PropType<number>;
        default: number;
    };
    center: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    font: {
        type: import("vue").PropType<string | FontData>;
        required: true;
    };
    text: {
        type: import("vue").PropType<string>;
    };
    curveSegments: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelEnabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    bevelThickness: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelSize: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelOffset: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelSegments: {
        type: import("vue").PropType<number>;
        default: number;
    };
    needUpdates: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    value: import("vue").ShallowRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    height: {
        type: import("vue").PropType<number>;
        default: number;
    };
    center: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    font: {
        type: import("vue").PropType<string | FontData>;
        required: true;
    };
    text: {
        type: import("vue").PropType<string>;
    };
    curveSegments: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelEnabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    bevelThickness: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelSize: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelOffset: {
        type: import("vue").PropType<number>;
        default: number;
    };
    bevelSegments: {
        type: import("vue").PropType<number>;
        default: number;
    };
    needUpdates: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>>, {
    height: number;
    center: boolean;
    size: number;
    curveSegments: number;
    bevelEnabled: boolean;
    bevelThickness: number;
    bevelSize: number;
    bevelOffset: number;
    bevelSegments: number;
    needUpdates: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
