export type KeyboardControlsProps = {
    /**
     * Keys to go forward.
     * @type {string[]}
     * @default '[w, W]'
     * @memberof KeyboardControlsProps
     *
     **/
    forward?: string[] | string;
    /**
     * Keys to go back.
     * @type {string[]}
     * @default '[s, S]'
     * @memberof KeyboardControlsProps
     *
     **/
    back?: string[] | string;
    /**
     * Keys to go left.
     * @type {string[]}
     * @default '[a, A]'
     * @memberof KeyboardControlsProps
     *
     **/
    left?: string[] | string;
    /**
     * Keys to go right.
     * @type {string[]}
     * @default '[d, D]'
     * @memberof KeyboardControlsProps
     *
     **/
    right?: string[] | string;
    /**
     * Key to jump (only with PointerLockControls).
     * @type {string[]}
     * @default 'space'
     * @memberof KeyboardControlsProps
     *
     **/
    jump?: string[] | string;
    /**
     * Default gravity number for jump.
     * @type {number}
     * @default 9.8
     * @memberof KeyboardControlsProps
     *
     **/
    gravity?: number;
    /**
     * Speed movement.
     * @type {number}
     * @default 0.1
     * @memberof KeyboardControlsProps
     *
     **/
    moveSpeed?: number;
    /**
     * Activate/deactivate headBobbing effect (only with PointerLockControls).
     * @type {boolean}
     * @default false
     * @memberof KeyboardControlsProps
     *
     **/
    headBobbing?: boolean;
    /**
     * Indicates if the forward movement is in the Z axis or Y axis.
     * @type {boolean}
     * @default false
     * @memberof KeyboardControlsProps
     *
     **/
    is2D?: boolean;
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    left: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    right: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    forward: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    back: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    jump: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    gravity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    moveSpeed: {
        type: import("vue").PropType<number>;
        default: number;
    };
    headBobbing: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    is2D: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    left: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    right: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    forward: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    back: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    jump: {
        type: import("vue").PropType<string | string[]>;
        default: () => string[];
    };
    gravity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    moveSpeed: {
        type: import("vue").PropType<number>;
        default: number;
    };
    headBobbing: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    is2D: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>>, {
    left: string | string[];
    right: string | string[];
    forward: string | string[];
    back: string | string[];
    jump: string | string[];
    gravity: number;
    moveSpeed: number;
    headBobbing: boolean;
    is2D: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
