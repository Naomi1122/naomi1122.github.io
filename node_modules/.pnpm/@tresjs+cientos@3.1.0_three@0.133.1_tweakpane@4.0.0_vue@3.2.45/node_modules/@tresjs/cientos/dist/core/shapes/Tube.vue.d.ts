import { TresColor } from '@tresjs/core';
import { QuadraticBezierCurve3, TubeGeometry, Vector3 } from 'three';
export type TubeProps = {
    /**
     * The curve, segments, radius, radialSegments, closed.
     * @default [new QuadraticBezierCurve3(new Vector3(-1, 0, 0), new Vector3(0, 1, 0), new Vector3(1, 0, 0)), 20, 0.2, 8, false]
     * @type {TubeGeometryParams}
     * @memberof TubeProps
     * @see https://threejs.org/docs/#api/en/geometries/TubeGeometry
     */
    args?: ConstructorParameters<typeof TubeGeometry>;
    /**
     * The color of the tube.
     * @default 0xffffff
     * @type {TresColor}
     * @memberof TubeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial
     */
    color?: TresColor;
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: string;
    };
    args: {
        type: import("vue").PropType<[path?: import("three").Curve<Vector3> | undefined, tubularSegments?: number | undefined, radius?: number | undefined, radialSegments?: number | undefined, closed?: boolean | undefined]>;
        default: () => (number | boolean | QuadraticBezierCurve3)[];
    };
}, {
    value: import("vue").ShallowRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: string;
    };
    args: {
        type: import("vue").PropType<[path?: import("three").Curve<Vector3> | undefined, tubularSegments?: number | undefined, radius?: number | undefined, radialSegments?: number | undefined, closed?: boolean | undefined]>;
        default: () => (number | boolean | QuadraticBezierCurve3)[];
    };
}>>, {
    color: [r: number, g: number, b: number] | import("three").ColorRepresentation;
    args: [path?: import("three").Curve<Vector3> | undefined, tubularSegments?: number | undefined, radius?: number | undefined, radialSegments?: number | undefined, closed?: boolean | undefined];
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
