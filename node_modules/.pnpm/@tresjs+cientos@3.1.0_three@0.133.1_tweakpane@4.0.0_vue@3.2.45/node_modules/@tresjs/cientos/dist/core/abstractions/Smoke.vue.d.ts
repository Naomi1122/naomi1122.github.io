import { TresColor } from '@tresjs/core';
export type SmokeProps = {
    /**
     * The color of the smoke.
     * @default 0xffffff
     * @type {TresColor}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshStandardMaterial
     */
    color?: TresColor;
    /**
     * The strength of the opacity.
     * @default 0.5
     * @type {number}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshStandardMaterial
     */
    opacity?: number;
    /**
     * The rotation speed of the smoke.
     * @default 0.4
     * @type {number}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshStandardMaterial
     */
    speed?: number;
    /**
     * The base width.
     * @default 4
     * @type {number}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial
     */
    width?: number;
    /**
     * The base depth.
     * @default 10
     * @type {number}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/geometries/PlaneGeometry
     */
    depth?: number;
    /**
     * The number of smoke to render.
     * @default 10
     * @type {number}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshStandardMaterial
     */
    segments?: number;
    /**
     * The texture of the smoke.
     * @default 'https://raw.githubusercontent.com/Tresjs/assets/main/textures/clouds/defaultCloud.png'
     * @type {string}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshStandardMaterial
     */
    texture?: string;
    /**
     * The depthTest.
     * @default true
     * @type {boolean}
     * @memberof SmokeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshStandardMaterial
     */
    depthTest?: boolean;
};
declare const _default: import("vue").DefineComponent<{
    opacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    width: {
        type: import("vue").PropType<number>;
        default: number;
    };
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: string;
    };
    texture: {
        type: import("vue").PropType<string>;
        default: string;
    };
    depthTest: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    speed: {
        type: import("vue").PropType<number>;
        default: number;
    };
    depth: {
        type: import("vue").PropType<number>;
        default: number;
    };
    segments: {
        type: import("vue").PropType<number>;
        default: number;
    };
}, {
    value: import("vue").ShallowRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    opacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    width: {
        type: import("vue").PropType<number>;
        default: number;
    };
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: string;
    };
    texture: {
        type: import("vue").PropType<string>;
        default: string;
    };
    depthTest: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    speed: {
        type: import("vue").PropType<number>;
        default: number;
    };
    depth: {
        type: import("vue").PropType<number>;
        default: number;
    };
    segments: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>>, {
    opacity: number;
    width: number;
    color: [r: number, g: number, b: number] | import("three").ColorRepresentation;
    texture: string;
    depthTest: boolean;
    speed: number;
    depth: number;
    segments: number;
}, {}>;
export default _default;
