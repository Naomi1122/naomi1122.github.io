import { Object3D, type Event } from 'three';
export interface TransformControlsProps {
    object: Object3D;
    mode?: string;
    enabled?: boolean;
    axis?: 'X' | 'Y' | 'Z' | 'XY' | 'YZ' | 'XZ' | 'XYZ';
    translationSnap?: number;
    rotationSnap?: number;
    scaleSnap?: number;
    space?: 'local' | 'world';
    size?: number;
    showX?: boolean;
    showY?: boolean;
    showZ?: boolean;
}
declare const _default: import("vue").DefineComponent<{
    object: {
        type: import("vue").PropType<Object3D<Event>>;
        required: true;
    };
    enabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    mode: {
        type: import("vue").PropType<string>;
        default: string;
    };
    axis: {
        type: import("vue").PropType<"XYZ" | "X" | "Y" | "Z" | "XY" | "YZ" | "XZ">;
        default: string;
    };
    translationSnap: {
        type: import("vue").PropType<number>;
    };
    rotationSnap: {
        type: import("vue").PropType<number>;
    };
    scaleSnap: {
        type: import("vue").PropType<number>;
    };
    space: {
        type: import("vue").PropType<"local" | "world">;
        default: string;
    };
    showX: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showY: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showZ: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "dragging" | "mouseDown" | "mouseUp" | "objectChange")[], "change" | "dragging" | "mouseDown" | "mouseUp" | "objectChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    object: {
        type: import("vue").PropType<Object3D<Event>>;
        required: true;
    };
    enabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    mode: {
        type: import("vue").PropType<string>;
        default: string;
    };
    axis: {
        type: import("vue").PropType<"XYZ" | "X" | "Y" | "Z" | "XY" | "YZ" | "XZ">;
        default: string;
    };
    translationSnap: {
        type: import("vue").PropType<number>;
    };
    rotationSnap: {
        type: import("vue").PropType<number>;
    };
    scaleSnap: {
        type: import("vue").PropType<number>;
    };
    space: {
        type: import("vue").PropType<"local" | "world">;
        default: string;
    };
    showX: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showY: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showZ: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onDragging?: ((...args: any[]) => any) | undefined;
    onMouseDown?: ((...args: any[]) => any) | undefined;
    onMouseUp?: ((...args: any[]) => any) | undefined;
    onObjectChange?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    size: number;
    mode: string;
    axis: "XYZ" | "X" | "Y" | "Z" | "XY" | "YZ" | "XZ";
    space: "local" | "world";
    showX: boolean;
    showY: boolean;
    showZ: boolean;
}, {}>;
export default _default;
