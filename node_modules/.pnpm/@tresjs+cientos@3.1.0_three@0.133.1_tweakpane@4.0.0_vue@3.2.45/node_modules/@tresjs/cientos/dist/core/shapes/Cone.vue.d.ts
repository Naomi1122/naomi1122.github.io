import { TresColor } from '@tresjs/core';
import { ConeGeometry } from 'three';
export type ConeProps = {
    /**
     * The radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength of the cone.
     * @default [1, 1, 12, 12, false, 0, Math.PI * 2]
     * @type {any[]}
     * @memberof ConeProps
     * @see https://threejs.org/docs/#api/en/geometries/ConeGeometry
     */
    args?: ConstructorParameters<typeof ConeGeometry>;
    /**
     * The color of the cone.
     * @default 0xffffff
     * @type {TresColor}
     * @memberof ConeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial
     */
    color?: TresColor;
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: string;
    };
    args: {
        type: import("vue").PropType<[radius?: number | undefined, height?: number | undefined, radialSegments?: number | undefined, heightSegments?: number | undefined, openEnded?: boolean | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined]>;
        default: () => (number | boolean)[];
    };
}, {
    value: import("vue").ShallowRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: string;
    };
    args: {
        type: import("vue").PropType<[radius?: number | undefined, height?: number | undefined, radialSegments?: number | undefined, heightSegments?: number | undefined, openEnded?: boolean | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined]>;
        default: () => (number | boolean)[];
    };
}>>, {
    color: [r: number, g: number, b: number] | import("three").ColorRepresentation;
    args: [radius?: number | undefined, height?: number | undefined, radialSegments?: number | undefined, heightSegments?: number | undefined, openEnded?: boolean | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined];
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
