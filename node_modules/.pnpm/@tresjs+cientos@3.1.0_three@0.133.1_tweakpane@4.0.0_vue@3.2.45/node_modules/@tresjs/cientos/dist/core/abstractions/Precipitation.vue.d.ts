import { TresColor } from '@tresjs/core';
export type PrecipitationProps = {
    /**
     * The size of the drops.
     *
     * @type {number}
     * @memberof PrecipitationProps
     * @default 0.1
     */
    size?: number;
    /**
     * The size of the precipitation area.
     *
     * @type {[number, number, number]}
     * @memberof PrecipitationProps
     * @default "[10, 10, 20]"
     */
    area?: [number, number, number];
    /**
     * The color of the shadows.
     *
     * @default '0xffffff'
     * @type {TresColor}
     * @memberof PrecipitationProps
     *
     */
    color?: TresColor;
    /**
     * Color texture of the drops.
     *
     * @type {string}
     * @memberof StarsProps
     * @default null
     */
    map?: null;
    /**
     * texture of the alphaMap Drops.
     *
     * @type {string}
     * @memberof StarsProps
     * @default null
     */
    alphaMap?: string;
    /**
     * enables the WebGL to know when not to render the pixel.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 0.01
     */
    alphaTest?: number;
    /**
     * Set the opacity of the drops.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 0.8
     */
    opacity?: number;
    /**
     * number of drops.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 5000
     */
    count?: number;
    /**
     * Speed of drops.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 5000
     */
    speed?: number;
    /**
     * Add randomness to the drops.
     *
     * @default 0.5
     * @type {number}
     * @memberof ContactShadowsProps
     *
     */
    randomness?: number;
    /**
     * Whether the shadows should write to the depth buffer or not.
     *
     * @default false
     * @type {boolean}
     * @memberof ContactShadowsProps
     *
     */
    depthWrite?: boolean;
    /**
     * show transparency on the drops texture.
     *
     * @type {boolean}
     * @memberof StarsProps
     * @default true
     */
    transparent?: boolean;
    /**
     * keep the same size regardless distance.
     *
     * @type {boolean}
     * @memberof StarsProps
     * @default true
     */
    sizeAttenuation?: boolean;
};
declare const _default: import("vue").DefineComponent<{
    opacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: number;
    };
    depthWrite: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    map: {
        type: import("vue").PropType<null>;
    };
    alphaTest: {
        type: import("vue").PropType<number>;
        default: number;
    };
    transparent: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    alphaMap: {
        type: import("vue").PropType<string>;
    };
    speed: {
        type: import("vue").PropType<number>;
        default: number;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    area: {
        type: import("vue").PropType<[number, number, number]>;
        default: () => number[];
    };
    count: {
        type: import("vue").PropType<number>;
        default: number;
    };
    randomness: {
        type: import("vue").PropType<number>;
        default: number;
    };
    sizeAttenuation: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    opacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    color: {
        type: import("vue").PropType<[r: number, g: number, b: number] | import("three").ColorRepresentation>;
        default: number;
    };
    depthWrite: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    map: {
        type: import("vue").PropType<null>;
    };
    alphaTest: {
        type: import("vue").PropType<number>;
        default: number;
    };
    transparent: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    alphaMap: {
        type: import("vue").PropType<string>;
    };
    speed: {
        type: import("vue").PropType<number>;
        default: number;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    area: {
        type: import("vue").PropType<[number, number, number]>;
        default: () => number[];
    };
    count: {
        type: import("vue").PropType<number>;
        default: number;
    };
    randomness: {
        type: import("vue").PropType<number>;
        default: number;
    };
    sizeAttenuation: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>>, {
    opacity: number;
    color: [r: number, g: number, b: number] | import("three").ColorRepresentation;
    depthWrite: boolean;
    alphaTest: number;
    transparent: boolean;
    speed: number;
    size: number;
    area: [number, number, number];
    count: number;
    randomness: number;
    sizeAttenuation: boolean;
}, {}>;
export default _default;
